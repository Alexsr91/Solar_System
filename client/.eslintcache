[{"/Users/Alex/Desktop/Ironhack/Final_Project/solar_system/solar-system/client/src/index.js":"1","/Users/Alex/Desktop/Ironhack/Final_Project/solar_system/solar-system/client/src/reportWebVitals.js":"2","/Users/Alex/Desktop/Ironhack/Final_Project/solar_system/solar-system/client/src/App.js":"3","/Users/Alex/Desktop/Ironhack/Final_Project/solar_system/solar-system/client/src/components/Signup.js":"4","/Users/Alex/Desktop/Ironhack/Final_Project/solar_system/solar-system/client/src/components/Login.js":"5","/Users/Alex/Desktop/Ironhack/Final_Project/solar_system/solar-system/client/src/components/Planetlist/Planet.js":"6","/Users/Alex/Desktop/Ironhack/Final_Project/solar_system/solar-system/client/src/components/NavBar.js":"7"},{"size":890,"mtime":1612297759496,"results":"8","hashOfConfig":"9"},{"size":362,"mtime":1611416961847,"results":"10","hashOfConfig":"9"},{"size":1813,"mtime":1612298824036,"results":"11","hashOfConfig":"9"},{"size":1188,"mtime":1612295177070,"results":"12","hashOfConfig":"9"},{"size":1116,"mtime":1612297185363,"results":"13","hashOfConfig":"9"},{"size":6637,"mtime":1612470834596,"results":"14","hashOfConfig":"9"},{"size":1084,"mtime":1612298035089,"results":"15","hashOfConfig":"9"},{"filePath":"16","messages":"17","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"18"},"1wu4uop",{"filePath":"19","messages":"20","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"18"},{"filePath":"21","messages":"22","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"23","usedDeprecatedRules":"18"},{"filePath":"24","messages":"25","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"18"},{"filePath":"26","messages":"27","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},{"filePath":"29","messages":"30","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"31","usedDeprecatedRules":"18"},{"filePath":"32","messages":"33","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"34","usedDeprecatedRules":"18"},"/Users/Alex/Desktop/Ironhack/Final_Project/solar_system/solar-system/client/src/index.js",[],["35","36"],"/Users/Alex/Desktop/Ironhack/Final_Project/solar_system/solar-system/client/src/reportWebVitals.js",[],"/Users/Alex/Desktop/Ironhack/Final_Project/solar_system/solar-system/client/src/App.js",["37"],"import './App.css';\nimport { Route, Link, Switch } from 'react-router-dom';\nimport React, { Component } from 'react';\nimport axios from 'axios'\n\n//Components\nimport Planet from './components/Planetlist/Planet'\nimport Navbar from './components/NavBar'\nimport Signup from './components/Signup'\n\nclass App extends Component {\n\n  state = {\n    solarElement: [],\n    fromLocal: [],\n    loading: true,\n    currentUser: this.props.user.userDoc\n\n  }\n\n  componentDidMount() {\n    axios.get(\"/api/planets\")\n      .then(response => {\n        console.log(\"aaaaaaaaaa\", response.data);\n        this.setState({\n          fromLocal: response.data,\n          loading: false\n        })\n\n      })\n  }\n\n  updateCurrentUser = (userObjFromBackend) => {\n    this.setState({\n      currentUser: userObjFromBackend\n    })\n  }\n\n  //Loading\n  render() {\n    if (this.state.loading) {\n      return <div>Loading...</div>\n    }\n\n\n\n    // let earthlocal = this.state.fromLocal.filter(e => e.apiReferenceId === \"Earth\");\n    // console.log(\"=============\", earthlocal);\n\n\n\n    return (\n      <div>\n        <Navbar currentUser={this.state.currentUser} updateCurrentUser={this.updateCurrentUser}></Navbar>\n\n        {this.state.currentUser && <p>Hello Mr. {this.state.currentUser.username}</p>}\n\n\n        <Switch>\n          <Route path=\"/home\" >\n            <p>Home Page, Hello :-)</p>\n            {this.state.fromLocal.map((planetObj) => {\n              return (\n                <div>\n                  <Link to={planetObj._id}>{planetObj.apiReferenceId}</Link>\n                </div>\n              )\n            })}\n          </Route>\n          <Route path=\"/:planetID\" render={(props) => <Planet key={props.match.params.planetID} match={props.match}></Planet>}></Route>\n        </Switch>\n\n\n\n\n\n      </div>\n    );\n  }\n}\n\n\nexport default App;\n\n\n\n\n","/Users/Alex/Desktop/Ironhack/Final_Project/solar_system/solar-system/client/src/components/Signup.js",[],"/Users/Alex/Desktop/Ironhack/Final_Project/solar_system/solar-system/client/src/components/Login.js",[],["38","39"],"/Users/Alex/Desktop/Ironhack/Final_Project/solar_system/solar-system/client/src/components/Planetlist/Planet.js",["40","41"],"import axios from 'axios';\nimport React, { Component } from 'react';\n\n\n\nimport { GLTFLoader } from 'three/examples/js/loaders/GLTFLoader'\n// Option 1: Import the entire three.js core library.\nimport * as THREE from 'three';\n\n\n\n\n// Option 2: Import just the parts you need.\nimport { Scene } from 'three';\n\n\n\n\n\n\n\n// import { Link } from 'react-router-dom';\n\nclass Planet extends Component {\n\n  // this.props.match.params\n\n  state = {\n    thePlanet: null,\n    apiInfo: null,\n    isPlanet: false,\n  }\n\n\n  componentDidMount() {\n    // this.props.match.params.planetID\n    axios.get('/api/planet/' + this.props.match.params.planetID).then((resp) => {\n      let data = resp.data\n\n      let apiInfo = data.apiInfo\n      let myModel = data.myModel\n\n      this.setState({\n        thePlanet: myModel,\n        apiInfo: apiInfo,\n        isPlanet: apiInfo.isPlanet,\n      })\n    })\n\n\n    let container;\n    let camera;\n    let renderer;\n    let scene;\n    let heart;\n\n    container = document.querySelector('.scene')\n\n    // create scene\n\n    scene = new THREE.Scene();\n    scene.background = new THREE.Color(0xFFE396)\n\n\n\n    // camera set up\n    // const fov = 35;\n    // const aspect = container.clientWidth / container.clientHeight;\n    // const near = 0.1;\n    // const far = 500;\n    // camera = new THREE.PerspectiveCamera(fov, aspect, near, far);\n    // camera.position.set(-20, 280, 500)\n\n    camera = new THREE.PerspectiveCamera(40, window.innerWidth / window.innerHeight, 1, 5000);\n    camera.position.x = 0;\n    camera.position.y = 300;\n    camera.position.z = 600;\n\n    // lights\n\n    const ambient = new THREE.AmbientLight(0xEFDFDF, 2);\n    scene.add(ambient);\n\n    const light = new THREE.DirectionalLight(0xFFEFD5, 3);\n    light.position.set(10, 10, 10);\n\n    const lightB = new THREE.DirectionalLight(0xFFEFD5, 3);\n    lightB.position.set(0, 0, 10);\n\n\n    scene.add(light, lightB);\n\n\n\n\n    // Renderer\n    renderer = new THREE.WebGLRenderer({ antialias: true, alpha: true });\n    renderer.setSize(window.innerWidth, window.innerHeight);\n    renderer.setPixelRatio(window.devicePixelRation)\n\n    container.appendChild(renderer.domElement);\n\n\n\n    // load model\n    const loader = new GLTFLoader();\n    loader.load('./3d/scene.gltf', function (gltf) {\n      scene.add(gltf.scene);\n      heart = gltf.scene.children[0];\n\n      // requestAnimationFrame(animate);\n      // heart.rotation.z += 0.010;\n      // renderer.render(scene, camera);\n    });\n  }\n\n\n\n  render() {\n    if (!this.state.thePlanet) {\n      return \"waiting for data ... \"\n    }\n    if (this.state.isPlanet) {\n      return (\n        <div className=\"master\">\n          <div className=\"scene\"></div>\n          <div className=\"PlanetHead\">\n\n            {this.state.thePlanet ? (\n              <div>\n                <h1>This is planet {this.state.apiInfo.englishName}</h1>\n                <p>{this.state.thePlanet.description}</p>\n              </div>\n\n            ) : \"still loading ... \"}\n            <div className=\"Infoblock\">\n              <p>Gravity:</p>\n              <p>{this.state.apiInfo.gravity}</p>\n            </div>\n            <div className=\"Infoblock\">\n              <p>density:</p>\n              <p>{this.state.apiInfo.density}</p>\n            </div>\n            <div className=\"Infoblock\">\n              <p>meanRadius:</p>\n              <p>{this.state.apiInfo.meanRadius}</p>\n            </div>\n            <div className=\"Infoblock\">\n              <p>EquaRadius:</p>\n              <p>{this.state.apiInfo.equaRadius}</p>\n            </div>\n          </div>\n        </div>\n      );\n    } else {\n      return (\n        <div className=\"master\">\n          \n          <div className=\"PlanetHead\">\n\n            {this.state.thePlanet ? (\n              <div>\n                <h1>This is not a planet {this.state.apiInfo.englishName}</h1>\n                <p>{this.state.thePlanet.description}</p>\n              </div>\n            ) : \"still loading ... \"}\n            <div className=\"Infoblock\">\n              <p>Gravity:</p>\n              <p>{this.state.apiInfo.gravity}</p>\n            </div>\n            <div className=\"Infoblock\">\n              <p>density:</p>\n              <p>{this.state.apiInfo.density}</p>\n            </div>\n            <div className=\"Infoblock\">\n              <p>meanRadius:</p>\n              <p>{this.state.apiInfo.meanRadius}</p>\n            </div>\n            <div className=\"Infoblock\">\n              <p>EquaRadius:</p>\n              <p>{this.state.apiInfo.equaRadius}</p>\n            </div>\n          </div>\n        </div>\n      );\n    }\n  }\n}\n\n\nexport default Planet;\n\n\n\n\n\n\n\n\n\n\n\n\n// let container;\n// let camera;\n// let renderer;\n// let scene;\n// let heart;\n\n// function init() {\n//     container = document.querySelector('.scene')\n\n//     // create scene\n\n//     scene = new THREE.Scene();\n//     scene.background = new THREE.Color(0xFFE396)\n\n\n\n//     // camera set up\n//     // const fov = 35;\n//     // const aspect = container.clientWidth / container.clientHeight;\n//     // const near = 0.1;\n//     // const far = 500;\n//     // camera = new THREE.PerspectiveCamera(fov, aspect, near, far);\n//     // camera.position.set(-20, 280, 500)\n\n//      camera = new THREE.PerspectiveCamera( 40, window.innerWidth / window.innerHeight, 1, 5000 );\n//     camera.position.x = 0;\n//     camera.position.y = 300;\n//     camera.position.z = 600;\n\n//     // lights\n\n//     const ambient = new THREE.AmbientLight(0xEFDFDF, 2);\n//     scene.add(ambient);\n\n//     const light = new THREE.DirectionalLight(0xFFEFD5, 3);\n//     light.position.set(10, 10, 10);\n\n//     const lightB = new THREE.DirectionalLight(0xFFEFD5, 3);\n//     lightB.position.set(0, 0, 10);\n\n\n//     scene.add(light, lightB);\n\n\n\n\n//     // Renderer\n//     renderer = new THREE.WebGLRenderer({ antialias: true, alpha: true });\n//     renderer.setSize(window.innerWidth, window.innerHeight);\n//     renderer.setPixelRatio(window.devicePixelRation)\n\n//     container.appendChild(renderer.domElement);\n\n\n//     // load model\n\n//     let loader = new THREE.GLTFLoader();\n//     loader.load('./3d/scene.gltf', function (gltf) {\n//         scene.add(gltf.scene);\n//         heart = gltf.scene.children[0];\n\n//         animate();\n//     });\n//     }\n\n//     function animate(){\n//     requestAnimationFrame(animate);\n//     heart.rotation.z += 0.010;\n//     renderer.render(scene, camera);\n//     }\n\n// init()\n\n// function onWindowResize(){\n//     camera.aspect = container.clientWidth / container.clientHeight;\n//     camera.updateProjectionMatrix();\n\n//     renderer.setSite(container.clientWidth, container.clientHeight);\n//  }\n\n\n// window.addEventListener(\"resize\", onWindowResize);","/Users/Alex/Desktop/Ironhack/Final_Project/solar_system/solar-system/client/src/components/NavBar.js",["42"],"import React from 'react';\nimport { Link } from 'react-router-dom';\nimport Signup from './Signup'\nimport Login from './Login'\n\n\nclass Navbar extends React.Component {\n    state = {\n        displayLogin:false,\n        displaySignup:false\n    }\n    signUpHandler = ()=>{\n        this.setState({\n            displaySignup : true,\n            displayLogin: false\n        })\n    }\n    logingHandler = ()=>{\n        this.setState({\n            displayLogin: true,\n            displaySignup:false\n        })\n    }\n    render() {\n        return (\n            <div className=\"navbar\">\n                <div>LOGO</div>\n                <div>\n                    <button data-toggle=\"modal\" data-target=\"#signupModal\" onClick={this.signUpHandler}>Register</button>\n                    <button onClick={this.logingHandler}>Login</button>\n\n                </div>\n\n                {this.state.displaySignup&& <Signup></Signup>}\n                {this.state.displayLogin && <Login updateCurrentUser={this.props.updateCurrentUser}></Login>}\n            </div>\n        );\n    }\n}\n\nexport default Navbar;\n",{"ruleId":"43","replacedBy":"44"},{"ruleId":"45","replacedBy":"46"},{"ruleId":"47","severity":1,"message":"48","line":9,"column":8,"nodeType":"49","messageId":"50","endLine":9,"endColumn":14},{"ruleId":"43","replacedBy":"51"},{"ruleId":"45","replacedBy":"52"},{"ruleId":"47","severity":1,"message":"53","line":14,"column":10,"nodeType":"49","messageId":"50","endLine":14,"endColumn":15},{"ruleId":"47","severity":1,"message":"54","line":109,"column":7,"nodeType":"49","messageId":"50","endLine":109,"endColumn":12},{"ruleId":"47","severity":1,"message":"55","line":2,"column":10,"nodeType":"49","messageId":"50","endLine":2,"endColumn":14},"no-native-reassign",["56"],"no-negated-in-lhs",["57"],"no-unused-vars","'Signup' is defined but never used.","Identifier","unusedVar",["56"],["57"],"'Scene' is defined but never used.","'heart' is assigned a value but never used.","'Link' is defined but never used.","no-global-assign","no-unsafe-negation"]